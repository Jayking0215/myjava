/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-12 04:36:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.example;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex05_005fincludeDirective_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/example/ex03.jsp", Long.valueOf(1681272849210L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<h1>include 지시어에 대해 살펴봅시다</h1>\r\n");
      out.write("\r\n");
      out.write("<h2>현재 페이지는 ex05_includeDirective.jsp 페이지입니다. </h2>\r\n");
      out.write("<h3>include지시어는 특정 페이지를 포함시키고자 할 때 사용합니다.</h3>\r\n");
      out.write("<h3>include지시어를 이용하면 포함시킬 페이지의 소스 코드를 삽입하는 형태로 포함시킵니다.</h3>\r\n");
      out.write("<hr color='red'>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	table{\r\n");
      out.write("		width:90%;\r\n");
      out.write("		margin:auto;\r\n");
      out.write("		height:400px;\r\n");
      out.write("		border-collapse:collapse;\r\n");
      out.write("	}\r\n");
      out.write("	table td{\r\n");
      out.write("		text-align:center;\r\n");
      out.write("	}\r\n");
      out.write("	table th{\r\n");
      out.write("		background-color:gray;\r\n");
      out.write("		color:white;\r\n");
      out.write("	}\r\n");
      out.write("	h1{\r\n");
      out.write("		text-align:center;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<h1>구구단</h1>\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("	");

	for(int dan=2;dan<10;dan++){
	
      out.write("\r\n");
      out.write("		<th>");
      out.print(dan);
      out.write(" 단</th>\r\n");
      out.write("	");
 
	}
	
      out.write("	\r\n");
      out.write("	</tr>\r\n");
      out.write("\r\n");

	for(int i=1;i<10;i++){

      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		");

		for(int j=2;j<10;j++){
		
      out.write("\r\n");
      out.write("		<td>\r\n");
      out.write("		");
      out.print(j);
      out.write('x');
      out.print(i);
      out.write('=');
      out.write(' ');
      out.print(j*i);
      out.write("\r\n");
      out.write("		</td>\r\n");
      out.write("		");
 
		}//for----
		
      out.write("\r\n");
      out.write("	</tr>\r\n");

	}//for------

      out.write("	\r\n");
      out.write("</table>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
