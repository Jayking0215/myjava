/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-11 13:19:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.memo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import memo.app.*;

public final class edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("memo.app");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>::메모 수정::</title>\r\n");
      out.write("</head>\r\n");
      out.write("<!-- memo.css참조 -->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/memo.css\">\r\n");
      out.write("<!-- ----------- -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function check(){\r\n");
      out.write("		//window.document.mf.submit();\r\n");
      out.write("		if(mf.name.value==\"\"){\r\n");
      out.write("			alert('작성자를 입력하세요.');\r\n");
      out.write("			mf.name.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(mf.msg.value==\"\"){\r\n");
      out.write("			alert('메모내용을 입력하세요.');\r\n");
      out.write("			mf.msg.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		let len=mf.msg.value.length;\r\n");
      out.write("		if(len>100){\r\n");
      out.write("			alert('메모 내용은 100자까지만 가능해요');\r\n");
      out.write("			mf.msg.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		mf.submit();\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"wrap\">\r\n");

	Object obj=request.getAttribute("memo");
	MemoVO vo=(MemoVO)obj;
	if(vo==null){

      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("			alert('존재하지 않는 글입니다.');\r\n");
      out.write("			location.href='MemoList';//웹브라우저의 url을 변경해서 이동한다\r\n");
      out.write("		</script>	\r\n");
	
		return;
	}//if-----

      out.write("\r\n");
      out.write("\r\n");
      out.write("	<form name=\"mf\" action=\"MemoEdit\" method=\"post\">\r\n");
      out.write("		 <table border=\"1\">\r\n");
      out.write("			  <tr>\r\n");
      out.write("			    <th colspan=\"2\"><h1>::한줄 메모장 글수정::</h1></th>\r\n");
      out.write("			  </tr>\r\n");
      out.write("			  <tr>\r\n");
      out.write("			    <td width=\"20%\">\r\n");
      out.write("			    	<b>글번호</b>\r\n");
      out.write("			    </td>\r\n");
      out.write("			    <td width=\"80%\">\r\n");
      out.write("			    	<input type=\"text\" name=\"no\" value=\"");
      out.print(vo.getNo());
      out.write("\" placeholder=\"No\" readonly style=\"width:40%\">\r\n");
      out.write("		    	</td>\r\n");
      out.write("			  </tr>\r\n");
      out.write("			  <tr>\r\n");
      out.write("			    <td width=\"20%\">\r\n");
      out.write("			    	<b>작성자</b>\r\n");
      out.write("			    </td>\r\n");
      out.write("			    <td width=\"80%\">\r\n");
      out.write("			    	<input type=\"text\" name=\"name\" value=\"");
      out.print(vo.getName());
      out.write("\" placeholder=\"Name\">\r\n");
      out.write("		    	</td>\r\n");
      out.write("			  </tr>\r\n");
      out.write("			  <tr>\r\n");
      out.write("			    <td width=\"20%\">\r\n");
      out.write("			    	<b>메모 내용</b>\r\n");
      out.write("		    	</td>\r\n");
      out.write("			    <td width=\"80%\">\r\n");
      out.write("			    	<input type=\"text\" name=\"msg\" value=\"");
      out.print(vo.getMsg());
      out.write("\" placeholder=\"Message\">\r\n");
      out.write("		    	</td>\r\n");
      out.write("			  </tr>\r\n");
      out.write("			  <tr>\r\n");
      out.write("			    <td colspan=\"2\">\r\n");
      out.write("				    <button type=\"button\" onclick=\"check()\">글 수정하기</button>\r\n");
      out.write("				    <button type=\"reset\">다시 쓰기</button>\r\n");
      out.write("			    </td>\r\n");
      out.write("			  </tr>\r\n");
      out.write("		 </table>\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
