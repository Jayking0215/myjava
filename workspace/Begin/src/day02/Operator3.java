package day02;

public class Operator3 {
	public static void main(String[] args) {
		System.out.println("다항 연산자----------");
		System.out.println("5. 산술 연산자(+,-,*,/,%)");
		
		int x=10;
		int y=3;
		System.out.printf("%d + %d=%d%n", x, y, (x+y));
		System.out.printf("%d - %d=%d%n", x, y, (x-y));
		System.out.printf("%d * %d=%d%n", x, y, (x*y));
		System.out.printf("%d / %d=%d%n", x, y, (x/y)); //int / int = int
		System.out.printf("%d mod %d=%d%n", x, y, (x%y));
		System.out.println(10/3.0f);//promotion(자동형변환)
		
		System.out.println("6. Shift연산자(<<, >>, >>>)----------");
		/*Shift연산자
		1) << : 왼쪽으로 비트수만큼 이동.
				오른쪽에 남은 빈칸은 0으로 채움
		2) >> : 오른쪽으로 비트수만큼 이동.
				앞에 남은 빈칸은 부호비트로 채움(양수:0, 음수:1)
		3) >>>: 오른쪽으로 비트수만큼 이동.
				앞에 남은 빈칸은 무조건 0으로 채움(모든 값을 양수로 변환)		
		*/
		//양수: 23
		//23...00000000 00000000 00000000 00010111(2bit)
		//23<<3: 00000000 00000000 00000000 10111000 -> 184
		//23>>3: 000(부호비트로 채움)00000 00000000 00000000 00000010 -> 2
		System.out.println(23<<3);
		System.out.println(23>>3);
		System.out.println(23>>>3); //양수 비트이동은 (>>)와 차이가 없음
		//음수: -23
		//음수: 양수값을 비트로 바꾼 뒤 1의 보수를 구한다.(비트반전) => 더하기 1을 한다. : 2의 보수로 음수값 구함
		//-0: 1111(2bit)를 없애기 위해 +1을 한다 -> 0000 == 2의 보수 원리(java가 음수를 구하는 법)
		//1의보수 23...11111111 11111111 11111111 11101000
		//2의보수 23...11111111 11111111 11111111 11101001
		//-23 : 11111111 11111111 11111111 11101001
		//-23<<3 : 11111111 11111111 11111111 01001000 -> -184
		//-23>>3 : 11111111 11111111 11111111 11111101 -> -3
		//-23>>>3 : 00011111 11111111 11111111 11111101 -> 536870909
		
		/*
		 * TIP!!! 음수값 비트로 표현하기
		 * [1] 양수값을 먼저 비트로 표현
		 * [2] 뒤에서 첫번째 1을 만날때까지는 양수의 비트와 동일하게 입력
		 * [3] 첫번째 1을 만난뒤부터는 비트반전을 한다.
		 * */
		System.out.println(-23<<3);
		System.out.println(-23>>3);
		System.out.println(-23>>>3);
		
		System.out.println("7. 비트연산자 (&, |, ^)----------");
		//정수값에만 사용되는 연산자: 정수를 비트로 바꾸어서 연산을 한다.
		int a=3, b=5;
		System.out.printf("%d & %d= %d%n", a, b, (a&b));//두 비트가 서로 같을때 1을 반환, 다르면 0을 반환
		System.out.printf("%d | %d= %d%n", a, b, (a|b));//두 비트 중 하나라도 1일경우 1을 반환, 아니면 0
		System.out.printf("%d ^ %d= %d%n", a, b, (a^b));//두 비트가 서로 다를때 1을 반환, 같으면 0 반환
		
		
	}
	public static void print(String str) {
		System.out.println(str);
	}
}
